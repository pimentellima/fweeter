{"ast":null,"code":"import axios from \"axios\";\nimport moment from \"moment\";\nexport const uploadImg = async file => {\n  try {\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    const res = await axios.post('//localhost:5000/upload/post', formData);\n    return res.data;\n  } catch (err) {\n    console.error(err);\n  }\n};\nexport const createPost = async (data, user_id) => {\n  const {\n    title,\n    description,\n    ingredients,\n    file\n  } = data;\n  const fileUrl = file[0] ? await uploadImg(file[0]) : '';\n  const postObj = {\n    user_id,\n    title,\n    description,\n    ingredients: JSON.stringify(ingredients),\n    date: moment().format(\"YYYY-MM-DD HH:mm:ss\"),\n    file: fileUrl\n  };\n  const res = axios.post('//localhost:5000/posts', postObj);\n  return res.data;\n};\nexport const deletePost = async id => await axios.delete('//localhost:5000/posts', {\n  data: {\n    id\n  }\n});\nexport const getUserPostsById = async id => {\n  try {\n    const res = await axios.get(`//localhost:5000/posts/${id}`);\n    const posts = res.data.map(post => ({\n      ...post,\n      ingredients: JSON.parse(post.ingredients),\n      date: moment(post.date).format('YYYY-MM-DD HH:mm:ss')\n    }));\n    return posts;\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const getPostsById = async id => {\n  try {\n    const res = await axios.get('//localhost:5000/posts/', {\n      params: {\n        id\n      }\n    });\n    const posts = res.data.map(post => ({\n      ...post,\n      ingredients: JSON.parse(post.ingredients),\n      date: moment(post.date).format('YYYY-MM-DD HH:mm:ss')\n    }));\n    return posts;\n  } catch (err) {\n    console.log(err);\n  }\n};","map":{"version":3,"names":["axios","moment","uploadImg","file","formData","FormData","append","res","post","data","err","console","error","createPost","user_id","title","description","ingredients","fileUrl","postObj","JSON","stringify","date","format","deletePost","id","delete","getUserPostsById","get","posts","map","parse","log","getPostsById","params"],"sources":["C:/Users/mathe/OneDrive/Documentos/vsc/fwitter/client/src/services/postsService.js"],"sourcesContent":["import axios from \"axios\";\r\nimport moment from \"moment\";\r\n\r\nexport const uploadImg = async (file) => {\r\n    try {\r\n        const formData = new FormData();\r\n        formData.append(\"file\", file);\r\n        const res = await axios.post('//localhost:5000/upload/post', formData);\r\n        return res.data;\r\n    } \r\n    catch(err) {\r\n        console.error(err);\r\n    }\r\n}\r\n\r\nexport const createPost = async (data, user_id) => {\r\n    const { title, description, ingredients, file } = data;\r\n    const fileUrl = file[0] ? await uploadImg(file[0]) : '';\r\n    const postObj = {\r\n        user_id,\r\n        title,\r\n        description,\r\n        ingredients: JSON.stringify(ingredients),\r\n        date: moment().format(\"YYYY-MM-DD HH:mm:ss\"),\r\n        file: fileUrl\r\n    }\r\n    const res =  axios.post('//localhost:5000/posts', postObj);\r\n    return res.data;\r\n}\r\n\r\nexport const deletePost = async id => \r\n    await axios.delete('//localhost:5000/posts', {\r\n            data: { id }\r\n        })\r\n\r\nexport const getUserPostsById = async(id) => {\r\n    try {\r\n        const res = await axios.get(`//localhost:5000/posts/${id}`);\r\n        const posts = res.data.map(post => ({\r\n            ...post, \r\n            ingredients: JSON.parse(post.ingredients),\r\n            date: moment(post.date).format('YYYY-MM-DD HH:mm:ss')\r\n        }))\r\n        return posts;\r\n    } catch(err) {\r\n        console.log(err);\r\n    }\r\n}\r\n\r\nexport const getPostsById = async(id) => {\r\n    try {\r\n        const res = await axios.get('//localhost:5000/posts/', {\r\n            params: {\r\n                id\r\n            }\r\n        });\r\n        const posts = res.data.map(post => ({\r\n            ...post, \r\n            ingredients: JSON.parse(post.ingredients),\r\n            date: moment(post.date).format('YYYY-MM-DD HH:mm:ss')\r\n        }))\r\n        return posts;\r\n    } catch(err) {\r\n        console.log(err);\r\n    }\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}